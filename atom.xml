<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Wang DaXia&#39;s Essays</title>
  
  <subtitle>渴望自由像是治不好的病      理由太多没有人会信      吾只需要自己静一静      这趟远行会在哪里停</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://wangdaxiaa.github.io/"/>
  <updated>2019-05-17T01:13:02.878Z</updated>
  <id>http://wangdaxiaa.github.io/</id>
  
  <author>
    <name>汪大侠</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>换了电脑如何继续使用hexo写博客</title>
    <link href="http://wangdaxiaa.github.io/2019/05/16/%E6%8D%A2%E4%BA%86%E7%94%B5%E8%84%91%E5%A6%82%E4%BD%95%E7%BB%A7%E7%BB%AD%E4%BD%BF%E7%94%A8hexo%E5%86%99%E5%8D%9A%E5%AE%A2/"/>
    <id>http://wangdaxiaa.github.io/2019/05/16/换了电脑如何继续使用hexo写博客/</id>
    <published>2019-05-16T09:25:53.000Z</published>
    <updated>2019-05-17T01:13:02.878Z</updated>
    
    <content type="html"><![CDATA[<p>最近因为换了工作，所以工作的电脑也随之换了。之前部署的博客是在之前公司的电脑上面部署的，先前也写了一篇多电脑同步hexo的文章，但是当真的换了电脑的时候发现问题还是很多的，比如我删除了之前配置的SSH，导致博客完全不能显示，现在特此记录一下解决方法和整个过程。</p><a id="more"></a><h5 id="电脑环境安装（Windows）"><a href="#电脑环境安装（Windows）" class="headerlink" title="电脑环境安装（Windows）"></a>电脑环境安装（Windows）</h5><p>安装Git（git安装好之后需要配置，配置详情谷歌一下）</p><p>安装nodeJS（在此不赘述如何安装）</p><h5 id="拷贝源文件"><a href="#拷贝源文件" class="headerlink" title="拷贝源文件"></a>拷贝源文件</h5><p>我在离职之前把本地的工程文件备份到了百度云盘里面，把必要的文件拷到新电脑你新建的文件夹下，如D：/myBlog，无需拷全部，只拷如下几个目录：</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">_config.yml</span><br><span class="line">package.json</span><br><span class="line">scaffolds</span><br><span class="line">source</span><br><span class="line">themes</span><br></pre></td></tr></table></figure><h5 id="安装hexo"><a href="#安装hexo" class="headerlink" title="安装hexo"></a>安装hexo</h5><p>打开cmd，在cmd终端下安装hexo：</p><figure class="highlight avrasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-<span class="keyword">cli</span> -g</span><br></pre></td></tr></table></figure><h5 id="进入你的项目目录（D-myBlog）"><a href="#进入你的项目目录（D-myBlog）" class="headerlink" title="进入你的项目目录（D:/myBlog）"></a>进入你的项目目录（D:/myBlog）</h5><p>在项目根目录下打开git bash，安装以下模块：</p><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">npm <span class="keyword">install</span> </span><br><span class="line">npm <span class="keyword">install</span> hexo-deployer-git --save   <span class="comment">#文章部署到git的模块</span></span><br></pre></td></tr></table></figure><h5 id="Github添加SSH-Keys"><a href="#Github添加SSH-Keys" class="headerlink" title="Github添加SSH Keys"></a>Github添加SSH Keys</h5><p>首先在本地创建SSH Keys：<code>ssh-keygen -t rsa -C &quot;wangting@qq.com&quot;</code></p><p>后面的邮箱为你的github注册邮箱，同时也是你登录github的邮箱，输入命令之后会要求确认路径和输入密码，路回车就行。成功的话会在<code>~/</code>下生成<code>.ssh</code>文件夹，进去打开<code>id_rsa.pub</code>，复制里面的内容到github的SSH设置里面即可，如下图：</p><img src="/2019/05/16/换了电脑如何继续使用hexo写博客/1.png"><p>输入<code>eval &quot;$(ssh-agent -s)&quot;</code>，添加密钥到<code>ssh-agent</code>，再输入<code>ssh-add ~/.ssh/id_rsa</code>，添加生成的<code>SSH key</code>到<code>ssh-agent</code>，如下：</p><img src="/2019/05/16/换了电脑如何继续使用hexo写博客/2.png"><p>然后我们再测试下公钥有没有添加成功：<code>ssh -T git@github.com</code>，如下图：</p><img src="/2019/05/16/换了电脑如何继续使用hexo写博客/3.png"><p>成功了。</p><p>之后再输入<code>hexo d</code>，个人博客就会成功再次显示。</p><p>如此简单的问题，我花了将近一天的时间去解决，本篇笔记就到此结束，谢谢大家！</p><p>参考文章：<a href="http://www.cnblogs.com/study-everyday/p/8902136.html" target="_blank" rel="noopener">http://www.cnblogs.com/study-everyday/p/8902136.html</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;最近因为换了工作，所以工作的电脑也随之换了。之前部署的博客是在之前公司的电脑上面部署的，先前也写了一篇多电脑同步hexo的文章，但是当真的换了电脑的时候发现问题还是很多的，比如我删除了之前配置的SSH，导致博客完全不能显示，现在特此记录一下解决方法和整个过程。&lt;/p&gt;
    
    </summary>
    
      <category term="Hexo" scheme="http://wangdaxiaa.github.io/categories/Hexo/"/>
    
    
      <category term="hexo" scheme="http://wangdaxiaa.github.io/tags/hexo/"/>
    
  </entry>
  
  <entry>
    <title>从零开始搭建一个Vue项目</title>
    <link href="http://wangdaxiaa.github.io/2019/05/16/%E4%BB%8E%E9%9B%B6%E5%BC%80%E5%A7%8B%E6%90%AD%E5%BB%BA%E4%B8%80%E4%B8%AAVue%E9%A1%B9%E7%9B%AE/"/>
    <id>http://wangdaxiaa.github.io/2019/05/16/从零开始搭建一个Vue项目/</id>
    <published>2019-05-16T08:06:39.000Z</published>
    <updated>2019-05-16T09:24:48.258Z</updated>
    
    <content type="html"><![CDATA[<p>最近换了一家新公司工作，同事告诉我前端项目用的是Vue框架，鉴于之前已经有了一点点的React项目经验，所以，也大概知道怎么去学习这个新的前端框架，下面我将记录一下怎么从零开始搭建一个Vue项目（之前刚开始学习react的时候走了不少弯路，当时带我的师傅也只是跟我说用react+antd做一个小demo出来，所以这次学习vue也有了自己的一点方法）。</p><a id="more"></a><h5 id="电脑环境准备"><a href="#电脑环境准备" class="headerlink" title="电脑环境准备"></a>电脑环境准备</h5><p>1、进入nodeJS官网下载你的电脑对应的安装包：<a href="https://nodejs.org/en/" target="_blank" rel="noopener">https://nodejs.org/en/</a></p><img src="/2019/05/16/从零开始搭建一个Vue项目/1.png"><p>这两个安装包的区别就是，第一个点击下载之后可以直接安装，第二个需要解压之后才能安装。node中会默认安装npm。打开<code>cmd</code>，输入<code>node -v</code>和<code>npm -v</code>，如若显示版本号，则安装成功。</p><p>2、安装淘宝镜像cnpm。cnpm安装依赖包是会比npm速度快很多，因为npm安装插件是从国外服务器下载，受网络影响较大，可能出现异常，所以我们用cnpm代替默认的npm。输入以下命令：</p><figure class="highlight coffeescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">npm</span> install -g cnpm --registry=https:<span class="regexp">//</span>registry.<span class="built_in">npm</span>.taobao.org</span><br></pre></td></tr></table></figure><p>​    安装完之后。输入<code>cnpm -v</code>查看cnpm版本。</p><p>3、全局安装<code>vue-cli</code>（vue官方脚手架），安装命令：</p><figure class="highlight avrasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cnpm install -g vue-<span class="keyword">cli</span></span><br></pre></td></tr></table></figure><h5 id="项目搭建"><a href="#项目搭建" class="headerlink" title="项目搭建"></a>项目搭建</h5><p>1、选择将要搭建项目的目录，比如 <code>d:/newVue</code></p><p>2、进入该目录：<code>cd ./newVue</code></p><p>3、新建项目。在项目目录下输入命令：</p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">vue</span> init webpack myvuedemo  <span class="comment">#命令中的myvuedemo是项目名称，不能含有大写字母，接下来的提示可直接回车</span></span><br></pre></td></tr></table></figure><p>具体说明如下：</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">Project name (myfirstvue)：项目名称。默认为命令后的名称，也可以自己重新起名</span><br><span class="line">Project description (A Vue.js project) :项目描述，也可直接点击回车，使用默认名字</span><br><span class="line">Author：项目作者,可以自己指定，也可直接回车</span><br><span class="line">Runtime + Compiler: recommended <span class="keyword">for</span> most<span class="built_in"> users </span>：运行加编译，默认推荐，直接回车</span><br><span class="line">nstall vue-router? ：是否安装vue-router，这是官方的路由，大多数情况下都使用，这里就输入“y”后回车即可</span><br><span class="line">Use ESLint <span class="keyword">to</span> lint your code? (Y/n)：是否使用ESLint管理代码，ESLint是个代码风格管理工具，是用来统一代码风格的，并不会影响整体的运行</span><br><span class="line">Setup unit tests with Karma + Mocha? (Y/n) ：是否安装单元测试</span><br><span class="line">Setup e2e tests with Nightwatch(Y/n)?    是否安装e2e测试</span><br></pre></td></tr></table></figure><p>4、进入项目目录，安装依赖模块：<code>cnpm install</code></p><p>5、运行项目，输入命令：<code>npm run dev</code></p><p>在浏览器中输入：<a href="http://localhost:8080" target="_blank" rel="noopener">http://localhost:8080</a> ，可看到如下页面，说明大功告成，一个vue项目已经初始化完成！：</p><img src="/2019/05/16/从零开始搭建一个Vue项目/2.png"><p>用编辑器打开项目，目录结构大致是这样的：</p><img src="/2019/05/16/从零开始搭建一个Vue项目/3.png"><p>这篇笔记就到此结束啦，谢谢大家！</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;最近换了一家新公司工作，同事告诉我前端项目用的是Vue框架，鉴于之前已经有了一点点的React项目经验，所以，也大概知道怎么去学习这个新的前端框架，下面我将记录一下怎么从零开始搭建一个Vue项目（之前刚开始学习react的时候走了不少弯路，当时带我的师傅也只是跟我说用react+antd做一个小demo出来，所以这次学习vue也有了自己的一点方法）。&lt;/p&gt;
    
    </summary>
    
      <category term="Vue" scheme="http://wangdaxiaa.github.io/categories/Vue/"/>
    
    
      <category term="Vue" scheme="http://wangdaxiaa.github.io/tags/Vue/"/>
    
  </entry>
  
  <entry>
    <title>JS基础之数据类型转换</title>
    <link href="http://wangdaxiaa.github.io/2019/05/07/JS%E5%9F%BA%E7%A1%80%E4%B9%8B%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B%E8%BD%AC%E6%8D%A2/"/>
    <id>http://wangdaxiaa.github.io/2019/05/07/JS基础之数据类型转换/</id>
    <published>2019-05-07T02:00:58.000Z</published>
    <updated>2019-05-07T03:11:36.456Z</updated>
    
    <content type="html"><![CDATA[<h5 id="将其他数据类型转换为Number"><a href="#将其他数据类型转换为Number" class="headerlink" title="将其他数据类型转换为Number"></a>将其他数据类型转换为Number</h5><h6 id="转换方式一："><a href="#转换方式一：" class="headerlink" title="转换方式一："></a>转换方式一：</h6><p>使用<code>Number()</code>函数：</p><p>​     字符串——&gt;数字：1.如果是纯数字的字符串，直接将其转为数字；2.如果是字符串中有数字，则转为<code>NaN</code>;</p><p>​     布尔——&gt;数字：<code>true</code>转成1，<code>false</code>转成0，<code>null</code>转成数字0，<code>undefined</code>转成数字<code>NaN</code></p><a id="more"></a><h5 id="转换方式二："><a href="#转换方式二：" class="headerlink" title="转换方式二："></a>转换方式二：</h5><p><code>parseInt()</code>可以将一个字符串中的有效的整数内容取出来，然后转换为<code>Number</code>，如下代码所示：</p><figure class="highlight abnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">var a = <span class="string">"123px"</span><span class="comment">;</span></span><br><span class="line"><span class="attribute">a</span> = parseInt(a)<span class="comment">;</span></span><br><span class="line">console.log(a)<span class="comment">;  //123</span></span><br></pre></td></tr></table></figure><p>在JS中，如果需要表示16进制的数字，则需以0（零）X开头；表示8进制的数字以0开头；表示2进制的数字，以0b开头（不是所有的浏览器都支持）。</p><p>像<code>&quot;070&quot;</code>这种字符串，有些浏览器会当成8进制解析，有些会当成10进制解析，那么可以在<code>parseInt()</code>中传递一个第二个参数，来指定数字的进制，如下：</p><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">var a</span> = <span class="string">"070"</span>;</span><br><span class="line"><span class="attribute">a</span> = parseInt(a,10);</span><br></pre></td></tr></table></figure><h5 id="将其他数据类型转换为Boolean"><a href="#将其他数据类型转换为Boolean" class="headerlink" title="将其他数据类型转换为Boolean"></a>将其他数据类型转换为Boolean</h5><p>使用<code>Boolean()</code>函数：</p><p>​     数字——&gt; 布尔：除了0和<code>NaN</code>，其余都是<code>true</code>;</p><p>​    字符串——&gt;布尔：除了空串，其余都是<code>true</code>;</p><p>​    <code>null</code>和<code>undefined</code>都会转换为<code>false</code>;</p><p>​    对象也会转换为<code>true</code></p><h5 id="隐式类型转换"><a href="#隐式类型转换" class="headerlink" title="隐式类型转换"></a>隐式类型转换</h5><p>在算数运算符里面，<code>+</code>（加号）里面，<strong>任何值和字符串相加都会转换为字符串，并做拼串操作</strong>：</p><p>​      我们可以利用这一特点，来将一个任意的数据类型转换为String，我们只要为任意的数据类型 <code>+</code> 一个<code>&quot; &quot;</code></p><p>，即可将其转换为String。这是一种隐式的类型转换，由浏览器自动完成，实际上它也是调用<code>String()</code>函数，例如：</p><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">var c</span> = 123;</span><br><span class="line"><span class="attribute">c</span> = c + <span class="string">" "</span>;</span><br></pre></td></tr></table></figure><p>​     任何值做<code>-</code>减，<code>*</code>乘，<code>/</code>除都会自动转为<code>Number</code>。我们可以利用这一特点做隐式的类型转换，可以通过一个值<code>-0</code>、<code>*1</code>、<code>/1</code>来将其转换为Number，原理和<code>Number()</code>函数一样，使用起来更加简单。</p><p>这篇笔记就到此结束啦，谢谢阅读~~~</p>]]></content>
    
    <summary type="html">
    
      &lt;h5 id=&quot;将其他数据类型转换为Number&quot;&gt;&lt;a href=&quot;#将其他数据类型转换为Number&quot; class=&quot;headerlink&quot; title=&quot;将其他数据类型转换为Number&quot;&gt;&lt;/a&gt;将其他数据类型转换为Number&lt;/h5&gt;&lt;h6 id=&quot;转换方式一：&quot;&gt;&lt;a href=&quot;#转换方式一：&quot; class=&quot;headerlink&quot; title=&quot;转换方式一：&quot;&gt;&lt;/a&gt;转换方式一：&lt;/h6&gt;&lt;p&gt;使用&lt;code&gt;Number()&lt;/code&gt;函数：&lt;/p&gt;
&lt;p&gt;​     字符串——&amp;gt;数字：1.如果是纯数字的字符串，直接将其转为数字；2.如果是字符串中有数字，则转为&lt;code&gt;NaN&lt;/code&gt;;&lt;/p&gt;
&lt;p&gt;​     布尔——&amp;gt;数字：&lt;code&gt;true&lt;/code&gt;转成1，&lt;code&gt;false&lt;/code&gt;转成0，&lt;code&gt;null&lt;/code&gt;转成数字0，&lt;code&gt;undefined&lt;/code&gt;转成数字&lt;code&gt;NaN&lt;/code&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="JS基础" scheme="http://wangdaxiaa.github.io/categories/JS%E5%9F%BA%E7%A1%80/"/>
    
    
      <category term="JavaScript" scheme="http://wangdaxiaa.github.io/tags/JavaScript/"/>
    
      <category term="数据类型" scheme="http://wangdaxiaa.github.io/tags/%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B/"/>
    
  </entry>
  
  <entry>
    <title>使用hexo写博客</title>
    <link href="http://wangdaxiaa.github.io/2019/05/05/%E4%BD%BF%E7%94%A8hexo%E5%86%99%E5%8D%9A%E5%AE%A2/"/>
    <id>http://wangdaxiaa.github.io/2019/05/05/使用hexo写博客/</id>
    <published>2019-05-05T10:02:50.000Z</published>
    <updated>2019-05-06T09:26:53.146Z</updated>
    
    <content type="html"><![CDATA[<p>Hexo的项目结构是在网站根目录的source/_posts目录下存放你的博客文档，以md.文档格式存储，默认存在一个hello-world.md文章，下面我来记录一下怎么使用hexo写博客。</p><a id="more"></a><h5 id="新建文档"><a href="#新建文档" class="headerlink" title="新建文档"></a>新建文档</h5><p>假设我们的文章名为“使用hexo写博客“，那么在，命令行输入一下命令即可：</p><figure class="highlight actionscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo <span class="keyword">new</span> <span class="string">"使用hexo写博客"</span></span><br></pre></td></tr></table></figure><p>上述命令的结果就是在<code>./hexo/source/_posts</code>路径下新建了一个<code>使用hexo写博客.md</code>文件，这样我们就可以开始写一篇博客了。</p><h5 id="文档格式"><a href="#文档格式" class="headerlink" title="文档格式"></a>文档格式</h5><p>我自己是使用的Typora编辑器（这个编辑器最大的好处就是“所见即所得”），用编辑器打开刚才新建的文件，就会发现其中已经存在内容：</p><figure class="highlight subunit"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">title: 使用hexo写博客</span><br><span class="line">copyright: true</span><br><span class="line">date: 2019<span class="string">-05</span><span class="string">-05</span> 18:02:50</span><br><span class="line"><span class="keyword">tags:</span></span><br></pre></td></tr></table></figure><p>这些内容是干嘛的呢？实际上，他们就是用于设置Markdown文档在被解析为静态网页文件时的相关配置，这些配置参数一般位于文件中最上方以<code>---</code>分割的区域（Typora编辑器打开源代码模式可见）。</p><p><code>title</code>的值是当前文档名，也是将来在网页中显示的文章标题；<code>data</code>的值是我们新建文档时当地时区的时间；<code>tags</code>的值是文档的标签，我们可以随意设置这个标签，如下：</p><figure class="highlight subunit"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">title: 使用hexo写博客</span><br><span class="line">copyright: true</span><br><span class="line">date: 2019<span class="string">-05</span><span class="string">-05</span> 18:02:50</span><br><span class="line"><span class="keyword">tags:</span> </span><br><span class="line">- hexo</span><br><span class="line">- 博客</span><br></pre></td></tr></table></figure><p>上面的配置参数为这篇文章贴上了hexo、博客标签，如果站点使用的主题支持标签功能，Markdown文档被解析为静态网页文件后就可以看到效果（在这里我用的是next主题，支持标签功能）。</p><h5 id="文章分类"><a href="#文章分类" class="headerlink" title="文章分类"></a>文章分类</h5><p><code>categories</code>是用来给文章分类的，他跟<code>tags</code>不同的是具有顺序性和层次性。</p><p>比如我写的这边文章，给的标签是hexo、博客，但是同时想把这边文章归类在hexo这个类别下，如下：</p><figure class="highlight subunit"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">title: 使用hexo写博客</span><br><span class="line">copyright: true</span><br><span class="line">date: 2019<span class="string">-05</span><span class="string">-05</span> 18:02:50</span><br><span class="line"><span class="keyword">tags:</span> </span><br><span class="line">- hexo</span><br><span class="line">- 博客</span><br><span class="line">categories: hexo</span><br></pre></td></tr></table></figure><p>两者的用法一样，只不过一个是标签一个是分类。</p><h5 id="插入图片"><a href="#插入图片" class="headerlink" title="插入图片"></a>插入图片</h5><p>写博客的时候有时候想插入图片，我这这里介绍一种方法：使用相对路径引用资源。</p><p>Hexo提供了资源文件夹功能，使用文本编辑器打开站点目录下的<code>_config.yml</code>文件，将<code>post_asset_folder</code>值设置为<code>true</code>。</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">post_asset_folder:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure><p>上面的操作会开启Hexo的资源文件管理功能。Hexo将会在我们每一次通过<code>hexo new &quot;title&quot;</code>命令创建新文章是自动创建一个同名文件夹，于是我们可以将文章所引用的相关资源放到这个同名文件夹下，然后通过相对路径引用：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">!<span class="selector-attr">[]</span>(<span class="selector-tag">image</span><span class="selector-class">.jpg</span>)</span><br></pre></td></tr></table></figure><p>上面的是Markdown的引用方式，图片只能在文章中显示，但无法在首页中正常显示，如果希望图片在文章和首页中同时显示，可以使用标签插件语法：</p><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;% asset_img <span class="built_in">image</span>.jpg <span class="keyword">this</span> is an <span class="built_in">image</span> %&#125;</span><br></pre></td></tr></table></figure><p>这样图片就会在文章和首页中同时显示了。</p><p>文章到此就结束了，参考文档见<a href="https://lfkid.github.io/2016/11/16/Hexo%E6%95%99%E7%A8%8B%EF%BC%9A%EF%BC%88%E4%B8%89%EF%BC%89%E4%BD%BF%E7%94%A8Hexo%E5%86%99%E5%8D%9A%E5%AE%A2/，谢谢大佬！" target="_blank" rel="noopener">https://lfkid.github.io/2016/11/16/Hexo%E6%95%99%E7%A8%8B%EF%BC%9A%EF%BC%88%E4%B8%89%EF%BC%89%E4%BD%BF%E7%94%A8Hexo%E5%86%99%E5%8D%9A%E5%AE%A2/，谢谢大佬！</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Hexo的项目结构是在网站根目录的source/_posts目录下存放你的博客文档，以md.文档格式存储，默认存在一个hello-world.md文章，下面我来记录一下怎么使用hexo写博客。&lt;/p&gt;
    
    </summary>
    
      <category term="Hexo" scheme="http://wangdaxiaa.github.io/categories/Hexo/"/>
    
    
      <category term="hexo" scheme="http://wangdaxiaa.github.io/tags/hexo/"/>
    
  </entry>
  
  <entry>
    <title>hexo多电脑同步</title>
    <link href="http://wangdaxiaa.github.io/2019/04/29/hexo%E5%A4%9A%E7%94%B5%E8%84%91%E5%90%8C%E6%AD%A5/"/>
    <id>http://wangdaxiaa.github.io/2019/04/29/hexo多电脑同步/</id>
    <published>2019-04-29T03:17:45.000Z</published>
    <updated>2019-04-29T04:05:00.042Z</updated>
    
    <content type="html"><![CDATA[<p>前段时间在部署这个博客的时候遇到了一个问题，当初是在公司的电脑上部署的，公司的电脑是windows系统，而我自己的电脑是Linux系统，那么怎么去解决这个同步的问题呢？当初想了一些办法，比如在两个系统上搭建两个博客？？？好像是不太现实的，这样做会很麻烦；再就是可以把本地文件上传到百度云或者拷到U盘，但是这样做不符合程序员的气质。看了网上的一些方法，总结了一个比较简单的做法，如下：</p><a id="more"></a><h5 id="如何上传博客到github"><a href="#如何上传博客到github" class="headerlink" title="如何上传博客到github"></a>如何上传博客到github</h5><p>在公司的电脑搭建并部署完之后，需要将项目上传到github上，在公司的电脑上执行如下命令：</p><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">git init   <span class="comment">#git初始化</span></span><br><span class="line">git remote <span class="keyword">add</span><span class="bash"> origin https://github.com/用户名/你的github名.github.io.git    <span class="comment">#添加仓库地址</span></span></span><br><span class="line">git checkout -b 分支名   <span class="comment">#新建分支并切换到新建的分支</span></span><br><span class="line">git <span class="keyword">add</span><span class="bash"> .   <span class="comment">#添加所有本地文件到git</span></span></span><br><span class="line">git commit -m <span class="string">""</span>     <span class="comment">#git提交</span></span><br><span class="line">git push origin 分支名   <span class="comment">#文件推送到hexo分支</span></span><br></pre></td></tr></table></figure><p>在这里执行命令必须字啊你创建的项目下执行，其中分支名自己创建，我自己创建的分支名为<code>hexo</code>，那么我要上传自己的项目命令如下：</p><figure class="highlight armasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="symbol">git</span> init </span><br><span class="line"><span class="symbol">git</span> remote <span class="keyword">add </span>origin https://github.com/WangDaXiaa/WangDaXiaa.github.io.git</span><br><span class="line"><span class="symbol">git</span> checkout -<span class="keyword">b </span>hexo</span><br><span class="line"><span class="symbol">git</span> <span class="keyword">add </span>.</span><br><span class="line"><span class="symbol">git</span> commit -m <span class="string">"上传本地部署文件"</span></span><br><span class="line"><span class="symbol">git</span> <span class="keyword">push </span>origin hexo</span><br></pre></td></tr></table></figure><p>执行完上面的之后，git会询问你的用户名和昵称，填写正确就可以将博客的工程文件上传到github的hexo分支下。</p><h5 id="如何从另一台电脑上下载博客工程"><a href="#如何从另一台电脑上下载博客工程" class="headerlink" title="如何从另一台电脑上下载博客工程"></a>如何从另一台电脑上下载博客工程</h5><p>那么我在我自己的电脑上如何下载项目文件呢？很简单，首先在我自己的电脑上部署好Git和nodeJS环境，然后输入以下命令：</p><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git <span class="keyword">clone</span> <span class="title">-b</span> 分支名 https://github.com/用户名/你的github用户</span><br></pre></td></tr></table></figure><p>克隆下载完成之后，进入到你项目的文件夹，重新配置你的hexo环境，命令如下：</p><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">sudo npm <span class="keyword">install</span> -g hexo-cli  <span class="comment">#安装hexo，注意这里不需要hexo初始化，否则之前的hexo配置参数会重置</span></span><br><span class="line">sudo npm <span class="keyword">install</span>   <span class="comment">#安装依赖库</span></span><br><span class="line">sudo npm <span class="keyword">install</span> hexo-deployer-git  <span class="comment">#安装git部署相关配置</span></span><br></pre></td></tr></table></figure><p>之后就如上文所示，创建撰写新的文章，并使用<code>sudo hexo g -d</code>命令创建并部署您的网站。值得注意的是，你的私钥文件需要携带，但极其不建议私钥文件放在github，建议放在U盘或网盘中，使用时下载即可。然后拷贝到相关目录下（Windows目录在<code>C:/Users/你的用户名/.ssh</code>目录、Mac在<code>~/.ssh/</code>目录，Ubuntu也在<code>~/.ssh/</code>目录下）即可正常部署您的网站。使用密钥时需注意权限，使用<code>chmod 密钥名称 700</code>命令即可更改权限，不更改权限无法使用密钥。</p><h5 id="写完博客之后如何再次同步"><a href="#写完博客之后如何再次同步" class="headerlink" title="写完博客之后如何再次同步"></a>写完博客之后如何再次同步</h5><p>写完之后如何再次同步呢？执行如下命令：</p><figure class="highlight armasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="symbol">git</span> <span class="keyword">add </span>.</span><br><span class="line"><span class="symbol">git</span> commit -m <span class="string">""</span></span><br><span class="line"><span class="symbol">git</span> <span class="keyword">push </span>origin 分支名</span><br></pre></td></tr></table></figure><p>这样在我的电脑上的数据也同步到github上面了，那么第二天只需要到公司的电脑上执行<code>git pull</code>就行，这样我的电脑上面的数据就全部同步到了公司的电脑上面了，以后部署完后，再次执行以上命令到github上就行</p><h5 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h5><p>总的来说，这样可以来回控制你的版本，只要善用git，就可以在任意电脑编写博客，控制你的项目。</p><p>所以，部署完项目后公司的电脑和我的电脑部署区别如下</p><p>公司的电脑：</p><figure class="highlight armasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="symbol">git</span> <span class="keyword">add </span>.</span><br><span class="line"><span class="symbol">git</span> commit -m <span class="string">""</span></span><br><span class="line"><span class="symbol">git</span> <span class="keyword">push </span>origin 分支名</span><br></pre></td></tr></table></figure><p>我自己的电脑：</p><figure class="highlight maxima"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">git pull</span><br><span class="line">hexo <span class="built_in">new</span> 文章名</span><br><span class="line">hexo clean </span><br><span class="line">hexo g -d</span><br><span class="line">git add .</span><br><span class="line">git commit -m <span class="string">""</span></span><br><span class="line">git <span class="built_in">push</span> <span class="built_in">origin</span> 分支名</span><br></pre></td></tr></table></figure><p>公司的电脑：</p><figure class="highlight maxima"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">git pull</span><br><span class="line">hexo <span class="built_in">new</span> 文章名</span><br><span class="line">hexo clean</span><br><span class="line">hexo g -d</span><br><span class="line">git add .</span><br><span class="line">git commit -m <span class="string">""</span></span><br><span class="line">git <span class="built_in">push</span> <span class="built_in">origin</span> 分支名</span><br></pre></td></tr></table></figure><p>文章到此就结束了，参考文章见<a href="https://cloud.tencent.com/developer/article/1046404，谢谢大佬！" target="_blank" rel="noopener">https://cloud.tencent.com/developer/article/1046404，谢谢大佬！</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;前段时间在部署这个博客的时候遇到了一个问题，当初是在公司的电脑上部署的，公司的电脑是windows系统，而我自己的电脑是Linux系统，那么怎么去解决这个同步的问题呢？当初想了一些办法，比如在两个系统上搭建两个博客？？？好像是不太现实的，这样做会很麻烦；再就是可以把本地文件上传到百度云或者拷到U盘，但是这样做不符合程序员的气质。看了网上的一些方法，总结了一个比较简单的做法，如下：&lt;/p&gt;
    
    </summary>
    
      <category term="Hexo" scheme="http://wangdaxiaa.github.io/categories/Hexo/"/>
    
    
      <category term="hexo" scheme="http://wangdaxiaa.github.io/tags/hexo/"/>
    
      <category term="同步" scheme="http://wangdaxiaa.github.io/tags/%E5%90%8C%E6%AD%A5/"/>
    
  </entry>
  
  <entry>
    <title>JS基础之基本数据类型和引用数据类型</title>
    <link href="http://wangdaxiaa.github.io/2019/04/25/JS%E5%9F%BA%E7%A1%80%E4%B9%8B%E5%9F%BA%E6%9C%AC%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B%E5%92%8C%E5%BC%95%E7%94%A8%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B/"/>
    <id>http://wangdaxiaa.github.io/2019/04/25/JS基础之基本数据类型和引用数据类型/</id>
    <published>2019-04-25T06:24:50.000Z</published>
    <updated>2019-05-06T05:03:08.157Z</updated>
    
    <content type="html"><![CDATA[<p> JS有六种数据类型，我们可以把他们分为两类：基本数据类型和引用数据类,其中基本数据类型包括：String,Number,Boolean,Null,Undefined;引用数据类型包括：Object。</p><h4 id="下面我们来看两段代码："><a href="#下面我们来看两段代码：" class="headerlink" title="下面我们来看两段代码："></a>下面我们来看两段代码：</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a = <span class="number">123</span>;</span><br><span class="line"><span class="keyword">var</span> b = a;</span><br><span class="line">a++;</span><br><span class="line"><span class="built_in">console</span>.log(a);   <span class="comment">//124</span></span><br><span class="line"><span class="built_in">console</span>.log(b);  <span class="comment">//123</span></span><br></pre></td></tr></table></figure><a id="more"></a><h5 id="上面这段代码定义了两个变量a和b，最后a的值和b的值是一样的"><a href="#上面这段代码定义了两个变量a和b，最后a的值和b的值是一样的" class="headerlink" title="上面这段代码定义了两个变量a和b，最后a的值和b的值是一样的"></a>上面这段代码定义了两个变量a和b，最后a的值和b的值是一样的</h5><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> obj = <span class="keyword">new</span> <span class="built_in">Object</span>();</span><br><span class="line">obj.name = <span class="string">"孙悟空"</span>;</span><br><span class="line"><span class="keyword">var</span> obj2 = obj;</span><br><span class="line">obj.name = <span class="string">"猪八戒"</span></span><br><span class="line"><span class="built_in">console</span>.log(obj.name);<span class="comment">//猪八戒</span></span><br><span class="line"><span class="built_in">console</span>.log(obj2.name);<span class="comment">//猪八戒</span></span><br></pre></td></tr></table></figure><h5 id="为什么obj2-name的值变成了猪八戒呢？"><a href="#为什么obj2-name的值变成了猪八戒呢？" class="headerlink" title="为什么obj2.name的值变成了猪八戒呢？"></a>为什么obj2.name的值变成了猪八戒呢？</h5><p>首先JS中的变量都是保存到<strong>栈</strong>内存中的，基本数据类型的值直接在栈内存中存储，值与值之间是独立存在的，修改一个变量不会改变其他的变量；对象是保存到<strong>堆</strong>内存中的，每创建一个新的对象，就会在堆内存中开辟出一个新的内存空间。而变量保存的是对象的内存地址（对象的引用），如果两个变量保存的是同一个对象引用，当一个通过一个变量修改属性时，另一个也会受到影响。</p><hr><h6 id="接下来我用两张图来解释一下"><a href="#接下来我用两张图来解释一下" class="headerlink" title="接下来我用两张图来解释一下"></a>接下来我用两张图来解释一下</h6><img src="/2019/04/25/JS基础之基本数据类型和引用数据类型/1.png"><img src="/2019/04/25/JS基础之基本数据类型和引用数据类型/2.png"><img src="/2019/04/25/JS基础之基本数据类型和引用数据类型/3.png">]]></content>
    
    <summary type="html">
    
      &lt;p&gt; JS有六种数据类型，我们可以把他们分为两类：基本数据类型和引用数据类,其中基本数据类型包括：String,Number,Boolean,Null,Undefined;引用数据类型包括：Object。&lt;/p&gt;
&lt;h4 id=&quot;下面我们来看两段代码：&quot;&gt;&lt;a href=&quot;#下面我们来看两段代码：&quot; class=&quot;headerlink&quot; title=&quot;下面我们来看两段代码：&quot;&gt;&lt;/a&gt;下面我们来看两段代码：&lt;/h4&gt;&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; a = &lt;span class=&quot;number&quot;&gt;123&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; b = a;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;a++;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(a);   &lt;span class=&quot;comment&quot;&gt;//124&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(b);  &lt;span class=&quot;comment&quot;&gt;//123&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
      <category term="JS基础" scheme="http://wangdaxiaa.github.io/categories/JS%E5%9F%BA%E7%A1%80/"/>
    
    
      <category term="JavaScript" scheme="http://wangdaxiaa.github.io/tags/JavaScript/"/>
    
      <category term="基础" scheme="http://wangdaxiaa.github.io/tags/%E5%9F%BA%E7%A1%80/"/>
    
      <category term="数据类型" scheme="http://wangdaxiaa.github.io/tags/%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B/"/>
    
  </entry>
  
  <entry>
    <title>从零开始搭建一个自己的React项目</title>
    <link href="http://wangdaxiaa.github.io/2019/04/23/new-react/"/>
    <id>http://wangdaxiaa.github.io/2019/04/23/new-react/</id>
    <published>2019-04-23T01:48:41.000Z</published>
    <updated>2019-04-26T02:07:00.436Z</updated>
    
    <content type="html"><![CDATA[<h3 id="1-安装nodeJS和npm"><a href="#1-安装nodeJS和npm" class="headerlink" title="1.安装nodeJS和npm"></a>1.安装nodeJS和npm</h3><h4 id="由于我们要使用npm这个包管理器，所以要安装nodeJS。现在版本的nodeJS已经集成了npm，所以我们只需要安装一次即可。"><a href="#由于我们要使用npm这个包管理器，所以要安装nodeJS。现在版本的nodeJS已经集成了npm，所以我们只需要安装一次即可。" class="headerlink" title="由于我们要使用npm这个包管理器，所以要安装nodeJS。现在版本的nodeJS已经集成了npm，所以我们只需要安装一次即可。"></a>由于我们要使用npm这个包管理器，所以要安装nodeJS。现在版本的nodeJS已经集成了npm，所以我们只需要安装一次即可。</h4><p>下载nodeJS，放到系统环境变量的路径里面，打开cmd，输入node -v（npm -v），如显示，安装正确。这样以后就可以在硬盘中任何一个位置使用npm命令。</p><h3 id="2-安装VS-Code及插件"><a href="#2-安装VS-Code及插件" class="headerlink" title="2.安装VS Code及插件"></a>2.安装VS Code及插件</h3><a id="more"></a><h3 id="3-全局安装脚手架（作用：帮你配置开发环境）"><a href="#3-全局安装脚手架（作用：帮你配置开发环境）" class="headerlink" title="3.全局安装脚手架（作用：帮你配置开发环境）"></a>3.全局安装脚手架（作用：帮你配置开发环境）</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm <span class="keyword">install</span> -g <span class="keyword">create</span>-react-app</span><br></pre></td></tr></table></figure><h5 id="注："><a href="#注：" class="headerlink" title="注："></a>注：</h5><h5 id="如果npm安装不成功，先安装cnpm："><a href="#如果npm安装不成功，先安装cnpm：" class="headerlink" title="如果npm安装不成功，先安装cnpm："></a>如果npm安装不成功，先安装cnpm：</h5><figure class="highlight coffeescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">npm</span> install -g cnpm --registry=https:<span class="regexp">//</span>registry.<span class="built_in">npm</span>.taobao.org</span><br></pre></td></tr></table></figure><h5 id="通过cnpm安装-cnpm-install-g-create-react-app-安装cnpm后，后续的命令npm都改为-cnpm"><a href="#通过cnpm安装-cnpm-install-g-create-react-app-安装cnpm后，后续的命令npm都改为-cnpm" class="headerlink" title="通过cnpm安装 cnpm install -g create-react-app(安装cnpm后，后续的命令npm都改为        cnpm)"></a>通过cnpm安装 cnpm install -g create-react-app(安装cnpm后，后续的命令npm都改为        cnpm)</h5><h3 id="4-创建工程项目"><a href="#4-创建工程项目" class="headerlink" title="4.创建工程项目"></a>4.创建工程项目</h3><h4 id="创建一个名字为antd-demo的React工程："><a href="#创建一个名字为antd-demo的React工程：" class="headerlink" title="创建一个名字为antd-demo的React工程："></a>创建一个名字为antd-demo的React工程：</h4><figure class="highlight dsconfig"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">create-react-app</span> <span class="string">antd-demo</span></span><br></pre></td></tr></table></figure><h4 id="进入项目文件夹："><a href="#进入项目文件夹：" class="headerlink" title="进入项目文件夹："></a>进入项目文件夹：</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> antd-demo</span><br></pre></td></tr></table></figure><h3 id="5-开始运行项目"><a href="#5-开始运行项目" class="headerlink" title="5.开始运行项目"></a>5.开始运行项目</h3><figure class="highlight coffeescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">npm</span> start</span><br></pre></td></tr></table></figure><h4 id="浏览器自动弹出项目初始页面"><a href="#浏览器自动弹出项目初始页面" class="headerlink" title="浏览器自动弹出项目初始页面"></a>浏览器自动弹出项目初始页面</h4>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;1-安装nodeJS和npm&quot;&gt;&lt;a href=&quot;#1-安装nodeJS和npm&quot; class=&quot;headerlink&quot; title=&quot;1.安装nodeJS和npm&quot;&gt;&lt;/a&gt;1.安装nodeJS和npm&lt;/h3&gt;&lt;h4 id=&quot;由于我们要使用npm这个包管理器，所以要安装nodeJS。现在版本的nodeJS已经集成了npm，所以我们只需要安装一次即可。&quot;&gt;&lt;a href=&quot;#由于我们要使用npm这个包管理器，所以要安装nodeJS。现在版本的nodeJS已经集成了npm，所以我们只需要安装一次即可。&quot; class=&quot;headerlink&quot; title=&quot;由于我们要使用npm这个包管理器，所以要安装nodeJS。现在版本的nodeJS已经集成了npm，所以我们只需要安装一次即可。&quot;&gt;&lt;/a&gt;由于我们要使用npm这个包管理器，所以要安装nodeJS。现在版本的nodeJS已经集成了npm，所以我们只需要安装一次即可。&lt;/h4&gt;&lt;p&gt;下载nodeJS，放到系统环境变量的路径里面，打开cmd，输入node -v（npm -v），如显示，安装正确。这样以后就可以在硬盘中任何一个位置使用npm命令。&lt;/p&gt;
&lt;h3 id=&quot;2-安装VS-Code及插件&quot;&gt;&lt;a href=&quot;#2-安装VS-Code及插件&quot; class=&quot;headerlink&quot; title=&quot;2.安装VS Code及插件&quot;&gt;&lt;/a&gt;2.安装VS Code及插件&lt;/h3&gt;
    
    </summary>
    
    
      <category term="react" scheme="http://wangdaxiaa.github.io/tags/react/"/>
    
      <category term="项目" scheme="http://wangdaxiaa.github.io/tags/%E9%A1%B9%E7%9B%AE/"/>
    
  </entry>
  
  <entry>
    <title>SEO优化</title>
    <link href="http://wangdaxiaa.github.io/2019/04/19/SEO%E4%BC%98%E5%8C%96/"/>
    <id>http://wangdaxiaa.github.io/2019/04/19/SEO优化/</id>
    <published>2019-04-19T06:46:12.000Z</published>
    <updated>2019-04-26T08:02:17.080Z</updated>
    
    <content type="html"><![CDATA[<p>一、内部优化</p><ol><li>META标签优化：例如TITLE，keywords，description</li><li>内部链接的优化：相关性链接（Tag标签），锚文本标签，各导航链接，及图片链接</li><li>网站内容更新：每天保持站内的更新（主要是文章的更新等）</li></ol><p>二、外部优化</p><ol><li>外部链接的类别：友情链接，博客，论坛，新闻，贴吧，相关信息网等，尽量保持链接的多样性</li><li>外链运营：每天添加一定数量的外部链接，使关键词排名稳定上升</li><li>外链选择：与一些和你网站相关性比较高，整体质量比较好的网站交换友情链接，巩固稳定关键词排名</li></ol><a id="more"></a>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;一、内部优化&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;META标签优化：例如TITLE，keywords，description&lt;/li&gt;
&lt;li&gt;内部链接的优化：相关性链接（Tag标签），锚文本标签，各导航链接，及图片链接&lt;/li&gt;
&lt;li&gt;网站内容更新：每天保持站内的更新（主要是文章的更新等）&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;二、外部优化&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;外部链接的类别：友情链接，博客，论坛，新闻，贴吧，相关信息网等，尽量保持链接的多样性&lt;/li&gt;
&lt;li&gt;外链运营：每天添加一定数量的外部链接，使关键词排名稳定上升&lt;/li&gt;
&lt;li&gt;外链选择：与一些和你网站相关性比较高，整体质量比较好的网站交换友情链接，巩固稳定关键词排名&lt;/li&gt;
&lt;/ol&gt;
    
    </summary>
    
    
  </entry>
  
</feed>
